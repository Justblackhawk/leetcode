class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> umap;
        for(int i=0;i<nums.size();i++){
            if(umap.count(target-nums[i])){
                return {i,umap[target-nums[i]]};
            }
            umap[nums[i]] = i;
        }
        return {-1,-1};
    }
};

// go version
func twoSum(nums []int, target int) []int {
    m := map[int]int{}
	for key,value := range nums{
		tmp := target - value
		if i, ok := m[tmp]; ok {
			return []int{i,key}
		}
		m[value] = key
	}
	return nil
}